@page "/"
@using PirarteTreassure.Classes;
@using PirarteTreassure.Interfaces;
@inject GameEngine ge

<h1>Game</h1>
<button class="btn btn-primary" @onclick="() => IsFightOn = ge.Challenge()">Challenge</button>
@if (ge.Adversaries.Count > 0)
{
    <button class="btn btn-danger" @onclick="() => ge.Attack()">Hero Attack</button>
}

@* <button class="btn btn-primary" @onclick="async () => await ge.Hero.Loot(ge.Adversaries[1])">
    Loot Monster
</button>
 

<div>
    @(IsFightOn ? "Fight" : "Flee")
</div>*@

<h3>Battle Log</h3>
<table class="table">
    <thead>
        <tr>
            <th>Attacker</th>
            <th>HP</th>
            <th>Adversary</th>
            <th>HP</th>
            <th>Damage</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var attack in ge.BattleLog)
        {
            <tr>
                <td>@attack.Attacker</td>
                <td>@attack.AttackerHP</td>
                <td>@attack.Adversary</td>
                <td>@attack.AdversaryHP</td>
                <td>@attack.Damage</td>
                <td>@(attack.Dead ? "Dead" : "Alive")</td>
            </tr>
        }
    </tbody>
</table>

<button @onclick="() => showInverntory = !showInverntory" type="button" class="btn btn-outline-success mt-3" data-bs-toggle="button">Toggle button</button>
@if (showInverntory && ge.Hero.Backpack is not null)
{
    <h3>Hero's backpack</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Size</th>
                <th>Weight</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Gold</td>
                <td>@ge.Hero.Gold</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td>Free Weight</td>
                <td></td>
                <td>@ge.Hero.Backpack.FreeWeight / @ge.Hero.Backpack.MaxWeight</td>
                <td></td>
            </tr>
            @foreach (var item in ge.Hero.Backpack.GetItems())
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Size</td>
                    <td>@item.Weight</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

<h3 class="mt-3">Looted Items</h3>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Size</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (ge.LootedItems.Gold > 0)
        {
            <tr>
                <td>Gold</td>
                <td>@ge.LootedItems.Gold</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ge.LootedItems = ge.Hero.PickUp(ge.LootedItems)">Click me</button>
                </td>
            </tr>
        }
        @foreach (var item in ge.LootedItems.Items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Size</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ge.Hero.AddToBackpack(item)">Click me</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code{
    //Backpack<IItem> LootedItems { get; set; } = new();
    bool IsFightOn = false, showInverntory = false;
}
